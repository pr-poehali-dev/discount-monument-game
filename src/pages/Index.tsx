import React, { useState, useEffect, useRef, useCallback } from 'react';
import { Button } from '@/components/ui/button';
import { Card } from '@/components/ui/card';
import Icon from '@/components/ui/icon';

interface GameObject {
  x: number;
  y: number;
  width: number;
  height: number;
}

interface Obstacle extends GameObject {
  speed: number;
}

const Index = () => {
  const canvasRef = useRef<HTMLCanvasElement>(null);
  const [gameState, setGameState] = useState<'menu' | 'playing' | 'gameOver' | 'discount'>('menu');
  const [score, setScore] = useState(0);
  const [showDiscountBanner, setShowDiscountBanner] = useState(false);
  
  // –ò–≥—Ä–æ–≤—ã–µ –æ–±—ä–µ–∫—Ç—ã
  const [player, setPlayer] = useState<GameObject>({
    x: 100,
    y: 200,
    width: 40,
    height: 40
  });
  
  const [obstacles, setObstacles] = useState<Obstacle[]>([]);
  const [playerVelocityY, setPlayerVelocityY] = useState(0);
  const gameLoopRef = useRef<number>();
  const keysRef = useRef<{[key: string]: boolean}>({});

  const GRAVITY = 0.5;
  const JUMP_FORCE = -12;
  const GROUND_Y = 350;
  const CANVAS_WIDTH = 800;
  const CANVAS_HEIGHT = 400;

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
  const initGame = useCallback(() => {
    setPlayer({ x: 100, y: 200, width: 40, height: 40 });
    setObstacles([]);
    setScore(0);
    setPlayerVelocityY(0);
    setShowDiscountBanner(false);
  }, []);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–ª–∞–≤–∏—à
  useEffect(() => {
    const handleKeyDown = (e: KeyboardEvent) => {
      keysRef.current[e.code] = true;
      if (e.code === 'Space' && gameState === 'playing') {
        e.preventDefault();
        if (player.y + player.height >= GROUND_Y) {
          setPlayerVelocityY(JUMP_FORCE);
        }
      }
    };

    const handleKeyUp = (e: KeyboardEvent) => {
      keysRef.current[e.code] = false;
    };

    window.addEventListener('keydown', handleKeyDown);
    window.addEventListener('keyup', handleKeyUp);

    return () => {
      window.removeEventListener('keydown', handleKeyDown);
      window.removeEventListener('keyup', handleKeyUp);
    };
  }, [gameState, player.y, player.height]);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–ª–∏–∑–∏–π
  const checkCollision = useCallback((rect1: GameObject, rect2: GameObject) => {
    return rect1.x < rect2.x + rect2.width &&
           rect1.x + rect1.width > rect2.x &&
           rect1.y < rect2.y + rect2.height &&
           rect1.y + rect1.height > rect2.y;
  }, []);

  // –ò–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª
  const gameLoop = useCallback(() => {
    if (gameState !== 'playing') return;

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –∏–≥—Ä–æ–∫–∞
    setPlayer(prev => {
      let newY = prev.y + playerVelocityY;
      let newVelY = playerVelocityY + GRAVITY;

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–µ–º–ª–∏
      if (newY + prev.height >= GROUND_Y) {
        newY = GROUND_Y - prev.height;
        newVelY = 0;
      }

      setPlayerVelocityY(newVelY);
      return { ...prev, y: newY };
    });

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π
    setObstacles(prev => {
      const updated = prev.map(obstacle => ({
        ...obstacle,
        x: obstacle.x - obstacle.speed
      })).filter(obstacle => obstacle.x + obstacle.width > -50);

      // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π
      if (updated.length === 0 || updated[updated.length - 1].x < CANVAS_WIDTH - 300) {
        updated.push({
          x: CANVAS_WIDTH,
          y: GROUND_Y - 60,
          width: 40,
          height: 60,
          speed: 5 + Math.random() * 3
        });
      }

      return updated;
    });

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–ª–∏–∑–∏–π
    obstacles.forEach(obstacle => {
      if (checkCollision(player, obstacle)) {
        setGameState('gameOver');
        setTimeout(() => setShowDiscountBanner(true), 1000);
      }
    });

    // –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—á–µ—Ç–∞
    setScore(prev => prev + 1);

    gameLoopRef.current = requestAnimationFrame(gameLoop);
  }, [gameState, player, obstacles, playerVelocityY, checkCollision]);

  // –ó–∞–ø—É—Å–∫ –∏–≥—Ä–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞
  useEffect(() => {
    if (gameState === 'playing') {
      gameLoopRef.current = requestAnimationFrame(gameLoop);
    } else {
      if (gameLoopRef.current) {
        cancelAnimationFrame(gameLoopRef.current);
      }
    }

    return () => {
      if (gameLoopRef.current) {
        cancelAnimationFrame(gameLoopRef.current);
      }
    };
  }, [gameState, gameLoop]);

  // –û—Ç—Ä–∏—Å–æ–≤–∫–∞
  useEffect(() => {
    const canvas = canvasRef.current;
    if (!canvas) return;

    const ctx = canvas.getContext('2d');
    if (!ctx) return;

    // –û—á–∏—Å—Ç–∫–∞ canvas
    ctx.fillStyle = '#45B7D1';
    ctx.fillRect(0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);

    // –†–∏—Å–æ–≤–∞–Ω–∏–µ –∑–µ–º–ª–∏
    ctx.fillStyle = '#4EODC4';
    ctx.fillRect(0, GROUND_Y, CANVAS_WIDTH, CANVAS_HEIGHT - GROUND_Y);

    if (gameState === 'playing' || gameState === 'gameOver') {
      // –†–∏—Å–æ–≤–∞–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
      ctx.fillStyle = '#FF6B35';
      ctx.fillRect(player.x, player.y, player.width, player.height);
      
      // –ì–ª–∞–∑–∞ –∏–≥—Ä–æ–∫–∞
      ctx.fillStyle = 'white';
      ctx.fillRect(player.x + 8, player.y + 8, 8, 8);
      ctx.fillRect(player.x + 24, player.y + 8, 8, 8);
      ctx.fillStyle = 'black';
      ctx.fillRect(player.x + 10, player.y + 10, 4, 4);
      ctx.fillRect(player.x + 26, player.y + 10, 4, 4);

      // –†–∏—Å–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π
      obstacles.forEach(obstacle => {
        ctx.fillStyle = '#333333';
        ctx.fillRect(obstacle.x, obstacle.y, obstacle.width, obstacle.height);
      });

      // –°—á–µ—Ç
      ctx.fillStyle = 'black';
      ctx.font = '24px Comic Sans MS';
      ctx.fillText(`–°—á–µ—Ç: ${Math.floor(score / 10)}`, 20, 40);
    }
  });

  const startGame = () => {
    initGame();
    setGameState('playing');
  };

  const restartGame = () => {
    setShowDiscountBanner(false);
    initGame();
    setGameState('playing');
  };

  const closeDiscountBanner = () => {
    setShowDiscountBanner(false);
    setGameState('menu');
  };

  return (
    <div className="min-h-screen bg-gradient-to-b from-sky-400 to-emerald-400 flex flex-col items-center justify-center p-4">
      <div className="text-center mb-6">
        <h1 className="text-6xl font-bold text-white drop-shadow-lg mb-2" style={{fontFamily: 'Comic Sans MS, cursive'}}>
          –ü–†–´–ì–ê–ô –ò –í–´–ñ–ò–í–ê–ô! üöÄ
        </h1>
        <p className="text-xl text-white drop-shadow">–ò–∑–±–µ–≥–∞–π –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è –∏ –Ω–∞–±–∏—Ä–∞–π –æ—á–∫–∏!</p>
      </div>

      <div className="relative">
        <canvas
          ref={canvasRef}
          width={CANVAS_WIDTH}
          height={CANVAS_HEIGHT}
          className="border-4 border-white rounded-lg shadow-2xl bg-sky-200"
        />

        {gameState === 'menu' && (
          <div className="absolute inset-0 bg-black bg-opacity-50 flex items-center justify-center rounded-lg">
            <Card className="p-8 text-center bg-white">
              <h2 className="text-3xl font-bold mb-4 text-orange-500" style={{fontFamily: 'Comic Sans MS, cursive'}}>
                –ì–æ—Ç–æ–≤ –∫ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—é?
              </h2>
              <p className="text-gray-600 mb-6">–ù–∞–∂–º–∏ –ü–†–û–ë–ï–õ –¥–ª—è –ø—Ä—ã–∂–∫–∞!</p>
              <Button 
                onClick={startGame}
                className="bg-orange-500 hover:bg-orange-600 text-white px-8 py-3 text-xl"
                style={{fontFamily: 'Comic Sans MS, cursive'}}
              >
                <Icon name="Play" className="mr-2" />
                –ò–ì–†–ê–¢–¨!
              </Button>
            </Card>
          </div>
        )}

        {gameState === 'gameOver' && !showDiscountBanner && (
          <div className="absolute inset-0 bg-red-500 bg-opacity-50 flex items-center justify-center rounded-lg">
            <Card className="p-8 text-center bg-white">
              <h2 className="text-3xl font-bold mb-4 text-red-500" style={{fontFamily: 'Comic Sans MS, cursive'}}>
                –ò–ì–†–ê –û–ö–û–ù–ß–ï–ù–ê! üíÄ
              </h2>
              <p className="text-gray-600 mb-2">–í–∞—à —Å—á–µ—Ç: {Math.floor(score / 10)}</p>
              <p className="text-sm text-gray-500 mb-6">–û–∂–∏–¥–∞–π—Ç–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ...</p>
            </Card>
          </div>
        )}
      </div>

      {/* –ë–∞–Ω–µ—Ä —Å–æ —Å–∫–∏–¥–∫–æ–π */}
      {showDiscountBanner && (
        <div className="fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center z-50 p-4">
          <Card className="max-w-md p-8 text-center bg-gradient-to-b from-yellow-400 to-orange-500 border-4 border-yellow-300 animate-scale-in">
            <div className="text-6xl mb-4">‚ö∞Ô∏è</div>
            <h2 className="text-3xl font-bold mb-4 text-white drop-shadow-lg" style={{fontFamily: 'Comic Sans MS, cursive'}}>
              –°–ö–ò–î–ö–ê 50%!
            </h2>
            <p className="text-white text-lg mb-2 drop-shadow">
              –ù–µ –ø–æ–≤–µ–∑–ª–æ –≤ –∏–≥—Ä–µ? 
            </p>
            <p className="text-white text-xl font-bold mb-6 drop-shadow">
              –ó–∞—Ç–æ –ø–æ–≤–µ–∑–µ—Ç —Å –ü–ê–ú–Ø–¢–ù–ò–ö–û–ú!
            </p>
            <div className="text-2xl font-bold text-red-600 bg-white px-4 py-2 rounded-lg mb-6 drop-shadow">
              –¢–û–õ–¨–ö–û –°–ï–ì–û–î–ù–Ø -50%
            </div>
            <div className="flex gap-3 justify-center">
              <Button 
                onClick={() => window.open('tel:+7-800-PAMYATNIK', '_blank')}
                className="bg-red-600 hover:bg-red-700 text-white px-6 py-3"
                style={{fontFamily: 'Comic Sans MS, cursive'}}
              >
                <Icon name="Phone" className="mr-2" />
                –ó–ê–ö–ê–ó–ê–¢–¨
              </Button>
              <Button 
                onClick={closeDiscountBanner}
                variant="outline"
                className="px-6 py-3 bg-white"
                style={{fontFamily: 'Comic Sans MS, cursive'}}
              >
                –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑
              </Button>
            </div>
          </Card>
        </div>
      )}

      <div className="mt-6 text-center">
        <p className="text-white text-lg drop-shadow">
          –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: <strong>–ü–†–û–ë–ï–õ</strong> - –ø—Ä—ã–∂–æ–∫
        </p>
        {gameState === 'playing' && (
          <Button 
            onClick={() => setGameState('menu')}
            variant="outline"
            className="mt-3 bg-white text-gray-700"
            style={{fontFamily: 'Comic Sans MS, cursive'}}
          >
            <Icon name="Pause" className="mr-2" />
            –ü–∞—É–∑–∞
          </Button>
        )}
      </div>
    </div>
  );
};

export default Index;